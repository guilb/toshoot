<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
  <style type="text/css">
  html { height: 100% }
  body { height: 100%; margin: 0; padding: 0 }
  #map-canvas { height: 100% }
  #over_map { position: absolute; background-color: transparent; bottom: 10px; left: 10px; z-index: 99; background: white; }
  </style>
  <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
  <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
  <script src="http://code.jquery.com/jquery-migrate-1.1.1.min.js"></script>
  <%= javascript_include_tag "https://www.google.com/jsapi" %>
</script>
<script>
function initialize() {
//        var latitude = 50.692700,
//            longitude = 3.
var latitude = 37.5,
longitude = -4
center = new google.maps.LatLng(latitude,longitude),
mapOptions = {
  center: center,
  zoom: 7,
  mapTypeId: google.maps.MapTypeId.ROADMAP
};


var map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
<% @disp_itineraries.each do |itinerary| %>
var DirectionsWaypoint<%= itinerary.id %> = [];
<% itinerary.places.each do |place| %>
var place<%= place.id %> = {lat: <%= place.lat %>, lng: <%= place.lng %>};
DirectionsWaypoint<%= itinerary.id %>.push({
  location: {lat: <%= place.lat %>, lng: <%= place.lng %>},
  stopover: true
});
<% end %>


var directionsDisplay<%= itinerary.id %> = new google.maps.DirectionsRenderer({
  polylineOptions: {
    strokeColor: '<%= itinerary.color %>'
  },
  map: map
});

        // Set destination, origin and travel mode.
        var request = {
          destination: '<%= itinerary.destination %>',
          origin: '<%= itinerary.origin %>',
          travelMode: 'DRIVING',
          waypoints: DirectionsWaypoint<%= itinerary.id %>,
          optimizeWaypoints: true,
          unitSystem: google.maps.UnitSystem.METRIC
        };

        // Pass the directions request to the directions service.
        var directionsService<%= itinerary.id %> = new google.maps.DirectionsService();
        directionsService<%= itinerary.id %>.route(request, function(response, status) {
          console.log(response);
          if (status == 'OK') {
            // Display the route on the map.
            directionsDisplay<%= itinerary.id %>.setDirections(response);
            var totalDistance = 0;
            var totalDuration = 0;
            var legs = response.routes[0].legs;
            for(var i=0; i<legs.length; ++i) {
              totalDistance += legs[i].distance.value;
              totalDuration += legs[i].duration.value;
            }
            $('#distance<%= itinerary.id %>').text(Math.round(totalDistance/1000));
            $('#duration<%= itinerary.id %>').text(toTimeString(totalDuration));

          }
        });

        <% end %>

        setMarkers( map);
        google.maps.event.addListener(map, 'click', function(event) {
                //call function to create marker

                var lat = event.latLng.lat();
                var lng = event.latLng.lng();
    // populate yor box/field with lat, lng
    alert("Lat=" + lat + "; Lng=" + lng);

  });
      }




      function setMarkers(map) {
        var json = (function () { 
          var json = null; 
          $.ajax({ 
            'async': false, 
            'global': false, 
            'url': "/places.json", 
            'dataType': "json", 
            'success': function (data) {
             json = data; 
           }
         });
          console.log(json);
          return json;
        })();

        //loop between each of the json elements
        for (var i = 0, length = json.length; i < length; i++) {
          var data = json[i],
          latLng = new google.maps.LatLng(data.lat, data.lng); 
            //alert(data.lat);
            //alert(data.lng);
            console.log(data);

            //if(bounds.contains(latLng)) {
                // Creating a marker and putting it on the map
                var marker = new google.maps.Marker({
                  position: latLng,
                  map: map,
                  title: data.text,
                  icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
                });
                infoBox(map, marker, data);
            //}
          }

        }

        function infoBox(map, marker, data) {
          var infoWindow = new google.maps.InfoWindow();
        // Attaching a click event to the current marker


        // Creating a closure to retain the correct data 
        // Note how I pass the current data in the loop into the closure (marker, data)
        (function(marker, data) {
          // Attaching a click event to the current marker
          google.maps.event.addListener(marker, "click", function(e) {
            infoWindow.setContent('<a href="places/'+data.id+'/edit">'+data.label+'</a>'+'<img src="'+data.photo_url+'">');
            infoWindow.open(map, marker);
          });
        })(marker, data);
      }

      google.maps.event.addDomListener(window, 'load', initialize);

      function toTimeString(seconds) {
        return (new Date(seconds * 1000)).toUTCString().match(/(\d\d:\d\d:\d\d)/)[0];
      }


      </script>
    </head>
    <body>
      <%= yield %>
    </body>
    </html>